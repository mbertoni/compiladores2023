

d :: Pos
d = def::Common.Pos

tc1 = Lam d "x" Nat (Sc1 (BOp d Add (Var d (Bound 0)) (4))) -- \x -> x+4
tc2 = (App d 5 (Lam d "x" Nat (Sc1 (BOp d Add (Var d (Bound 0)) (4))) )  )
tc3 = Let d "x" Nat 4 (Sc1 (BOp d Add (Var d (Bound 0)) 9)) -- let x = 4 in x+9
tc4 = Lam d "x" Nat (Sc1 (BOp d Add (Var d (Bound 0) ) 9) ) -- \x -> x+9
tc5 = App d tc4 5
tc6 = Pnt d (S "pastito") tc3
tc7 = BOp d Sub 9 8
tc8 = Pnt d (S "verde") tc6
tc9 = IfZ d 0 1 2
tc10 = IfZ d 1 1 2
tc11 = IfZ d (BOp d Add 2 3) (Pnt d (S "True") 1) (Pnt d (S "False") 2)
tc12 = IfZ d 0 (Pnt d (S "True") (BOp d Add 2 3)) (Pnt d (S "False") 2)
tc13 = IfZ d 1 (Pnt d (S "True") (BOp d Add 2 3)) (Pnt d (S "False") 2)
tc14 = IfZ d (Pnt d (S "Condicion") (BOp d Add 2 3)) (Pnt d (S "True") (BOp d Add 2 7)) (Pnt d (S "False") 2)
tc15 = IfZ d 0 tc3 tc7
tc16 = IfZ d 1 tc3 tc7
tc17 = Pnt d (S "pastito") tc15
tc18 = Pnt d (S "pastito") tc16


-- escribir casos de lets de funciones recursivas con m√°s de una variable