

d :: Pos
d = def::Common.Pos

tc1 = Lam d "x" Nat (Sc1 (BOp d Add (Var d (Bound 0)) (4))) -- \x -> x+4
tc2 = (App d 5 (Lam d "x" Nat (Sc1 (BOp d Add (Var d (Bound 0)) (4))) )  )
tc3 = Let d "x" Nat 4 (Sc1 (BOp d Add (Var d (Bound 0)) 9)) -- let x = 4 in x+9
tc4 = Lam d "x" Nat (Sc1 (BOp d Add (Var d (Bound 0) ) 9) ) -- \x -> x+9
tc5 = App d tc4 5
tc6 = Pnt d (S "pastito") tc3
tc7 = BOp d Sub 9 8
tc8 = Pnt d (S "verde") tc6
tc9 = IfZ d 0 1 2
tc10 = IfZ d 1 1 2
tc11 = IfZ d (BOp d Add 2 3) (Pnt d (S "True") 1) (Pnt d (S "False") 2)
tc12 = IfZ d 0 (Pnt d (S "True") (BOp d Add 2 3)) (Pnt d (S "False") 2)
tc13 = IfZ d 1 (Pnt d (S "True") (BOp d Add 2 3)) (Pnt d (S "False") 2)
tc14 = IfZ d (Pnt d (S "Condicion") (BOp d Add 2 3)) (Pnt d (S "True") (BOp d Add 2 7)) (Pnt d (S "False") 2)
tc15 = IfZ d 0 tc3 tc7
tc16 = IfZ d 1 tc3 tc7
tc17 = Pnt d (S "pastito") tc15
tc18 = Pnt d (S "pastito") tc16


let (orden_de_impresion : Nat) = print "uno! " (print "dos! " 3)

let (f : Nat -> Nat) = fun (x:Nat) ->
	ifz x
	then print "uno! " 1
	else print "dos! " 2

let (test : Nat) =
	let (a : Nat) = f 0 in
	let (b : Nat) = f 1 in
	0

:
Decled:Let (_,Nat) "orden_de_impresion" Nat (Pnt (_,Nat) (S {unS = "uno! "}) (Pnt (_,Nat) (S {unS = "dos! "}) (Lit (_,Nat) (N {unN = 3})))) |Let (_,Arrow Nat Nat) "f" (Arrow Nat Nat) (Lam (_,Arrow Nat Nat) "x" Nat |IfZ (_,Nat) (Var (_,Nat) (Bound 0)) (Pnt (_,Nat) (S {unS = "uno! "}) (Lit (_,Nat) (N {unN = 1}))) (Pnt (_,Nat) (S {unS = "dos! "}) (Lit (_,Nat) (N {unN = 2})))|) |Let (_,Nat) "a" Nat (App (_,Nat) (Var (_,Arrow Nat Nat) (Bound 0)) (Lit (_,Nat) (N {unN = 0}))) |Let (_,Nat) "b" Nat (App (_,Nat) (Var (_,Arrow Nat Nat) (Bound 1)) (Lit (_,Nat) (N {unN = 1}))) |Lit (_,Nat) (N {unN = 0})||||
declIntoTerm (dtt:dtts) = Let i dtt.name ty dtt.body (close dtt.name rest)
          where 
            rest = declIntoTerm dtts
            i = getInfo dtt.body
            ty = getTy dtt.body