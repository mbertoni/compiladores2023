
Before Elabing: LetDecl NP (fact5,__Nat__ -> __Nat__) NoRec [] Let NP (fact,__Nat__) (Rec (x :| [],__Nat__)) [] Par IfZ Var x Lit 1 Par BOp + Var x Par App Var fact Par BOp - Var x Lit 1 Pnt "5! = " Par App Var fact Lit 5

Environment: []

Raw: Let _ "fact" (Arrow Nat Nat) (Fix _ "fact" (Arrow Nat Nat) "x" Nat ||IfZ _ (Var _ (Bound 0)) (Lit _ (N {unN = 1})) (BOp _ Add (Var _ (Bound 0)) (App _ (Var _ (Bound 1)) (BOp _ Sub (Var _ (Bound 0)) (Lit _ (N {unN = 1})))))||) |Pnt _ (S {unS = "5! = "}) (App _ (Var _ (Bound 0)) (Lit _ (N {unN = 5})))|

TypeChecked: Decl {pos = _, name = "fact5", body = Let (_,Nat) "fact" (Arrow Nat Nat) (Fix (_,Arrow Nat Nat) "fact" (Arrow Nat Nat) "x" Nat ||IfZ (_,Nat) (Var (_,Nat) (Bound 0)) (Lit (_,Nat) (N {unN = 1})) (BOp (_,Nat) Add (Var (_,Nat) (Bound 0)) (App (_,Nat) (Var (_,Arrow Nat Nat) (Bound 1)) (BOp (_,Nat) Sub (Var (_,Nat) (Bound 0)) (Lit (_,Nat) (N {unN = 1})))))||) |Pnt (_,Nat) (S {unS = "5! = "}) (App (_,Nat) (Var (_,Arrow Nat Nat) (Bound 0)) (Lit (_,Nat) (N {unN = 5})))|}

Evaling: 
5! = 16

After Evaling: Lit (_,Nat) (N {unN = 16})

Environment: []
